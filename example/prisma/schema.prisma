datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator custom_generator {
  provider            = "ts-node node_modules/@jmondi/prisma-generator-nestjs-graphql/src/generator.ts"
  output              = "../generated"
  modelPrefix         = "Base"
  modelSuffix         = ""
  modelFileSuffix     = ".model"
  dtoFileSuffix       = ".dto"
  useAbstractModels   = true
  compileJs           = false
  withPaginatorInputs = true
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  /// @Validate.IsEmail()
  email        String    @unique @db.VarChar(255)
  /// @HideField()
  passwordHash String?   @db.VarChar(255)
  /// @HideField()
  tokenVersion Int       @default(0)
  /// @HideField()
  /// @Validate.IsDate() @Validate.MaxDate(new Date())
  lastLoginAt  DateTime? @db.Timestamp(6)
  /// @HideField()
  /// @Validate.IsIP()
  createdIP    String    @db.Inet
  /// @HideField()
  /// @Validate.IsDate() @Validate.MaxDate(new Date())
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  /// @HideField()
  updatedAt    DateTime? @updatedAt
  posts        Post[]

  @@index([email])
}

enum Tag {
  blue
  red
}

enum Category {
  fun
  boring
  misc
}

model Post {
  id       String   @id @default(uuid()) @db.Uuid
  category Category
  tags     Tag[]
  body     String
  userId   String
  user     User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model StringExample {
  id String @id
}

model IntExample {
  id Int @id
}

model AutoIncrementExample {
  id Int @id @default(autoincrement())
}

model UuidRequiredExample {
  id String @id @db.Uuid
}

model UuidExample {
  id String @id @default(uuid()) @db.Uuid
}

model CuidExample {
  id String @id @default(cuid())
}

model JSONExample {
  id      Int  @id
  jsonCol Json
}
