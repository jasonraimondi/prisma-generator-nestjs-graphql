/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import { ObjectType, Field, ID } from "@nestjs/graphql";
import { NoId as PrismaNoId } from "@prisma/client";
import { BaseUser } from "./User.model";

export type NoIdConstructor = {
  userId: string;
  user?: BaseUser | null;
  createdAt?: Date | null;
};

@ObjectType({ isAbstract: true })
export class BaseNoId implements PrismaNoId {
  @Field(() => ID, { nullable: false })
  readonly userId: string;

  @Field(() => BaseUser, { nullable: true })
  user: null | BaseUser;

  @Field(() => Date!, { nullable: false })
  createdAt: Date;

  constructor(model: NoIdConstructor) {
    this.userId = model.userId;
    this.user = model.user ?? null;
    this.createdAt = model.createdAt ?? new Date();
  }

  static fromPrisma(data: PrismaNoId): BaseNoId {
    return new BaseNoId(data);
  }

  /**
   * Removes all relational fields from the model
   * so you can use it to create or update a record of this model
   * @returns PrismaNoId
   */
  toPrisma(): PrismaNoId {
    const { user, ...entity } = this;
    return entity;
  }
}

export { PrismaNoId };
