// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`model templater > with autoincrement 1`] = `
"/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import { ObjectType, Field, ID } from \\"@nestjs/graphql\\";
import { User as PrismaUser } from \\"./client-path\\";

export type UserConstructor = {
  id?: number | null;
};

@ObjectType({ isAbstract: true })
export class User implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: number;

  constructor(model: UserConstructor) {
    this.id = model.id!;
  }

  static fromPrisma(data: PrismaUser): User {
    return new User(data);
  }

  // this method removes all relational fields from the entity, and returns the base PrismaModel
  toPrisma(): PrismaUser {
    const { ...entity } = this;
    return entity;
  }
}

export { PrismaUser };
"
`;

exports[`model templater > with cuid 1`] = `
"/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import cuid from \\"cuid\\";

import { ObjectType, Field, ID } from \\"@nestjs/graphql\\";
import { User as PrismaUser } from \\"./client-path\\";

export type UserConstructor = {
  id?: string | null;
};

@ObjectType({ isAbstract: true })
export class User implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: string;

  constructor(model: UserConstructor) {
    this.id = model.id ?? cuid();
  }

  static fromPrisma(data: PrismaUser): User {
    return new User(data);
  }

  // this method removes all relational fields from the entity, and returns the base PrismaModel
  toPrisma(): PrismaUser {
    const { ...entity } = this;
    return entity;
  }
}

export { PrismaUser };
"
`;

exports[`model templater > with integer 1`] = `
"/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import { ObjectType, Field, ID, Int } from \\"@nestjs/graphql\\";
import { User as PrismaUser } from \\"./client-path\\";

export type UserConstructor = {
  id: string;
  favoriteNumber: number;
};

@ObjectType({ isAbstract: true })
export class User implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: string;

  @Field(() => Int!, { nullable: false })
  favoriteNumber: number;

  constructor(model: UserConstructor) {
    this.id = model.id;
    this.favoriteNumber = model.favoriteNumber;
  }

  static fromPrisma(data: PrismaUser): User {
    return new User(data);
  }

  // this method removes all relational fields from the entity, and returns the base PrismaModel
  toPrisma(): PrismaUser {
    const { ...entity } = this;
    return entity;
  }
}

export { PrismaUser };
"
`;

exports[`model templater > with json 1`] = `
"/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import GraphQLJSON from \\"graphql-type-json\\";

import { ObjectType, Field, ID } from \\"@nestjs/graphql\\";
import { Prisma, User as PrismaUser } from \\"./client-path\\";

export type UserConstructor = {
  id: number;
  jsonCol: Prisma.JsonValue;
};

@ObjectType({ isAbstract: true })
export class User implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: number;

  @Field(() => GraphQLJSON!, { nullable: false })
  jsonCol: Prisma.JsonValue;

  constructor(model: UserConstructor) {
    this.id = model.id;
    this.jsonCol = model.jsonCol;
  }

  static fromPrisma(data: PrismaUser): User {
    return new User(data);
  }

  // this method removes all relational fields from the entity, and returns the base PrismaModel
  toPrisma(): PrismaUser {
    const { ...entity } = this;
    return entity;
  }
}

export { PrismaUser };
"
`;

exports[`model templater > with relation 1`] = `
"/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import { ObjectType, Field, ID } from \\"@nestjs/graphql\\";
import { User as PrismaUser } from \\"./client-path\\";
import { Post } from \\"./Post.model\\";

export type UserConstructor = {
  id: string;
  posts?: Post[] | null;
};

@ObjectType({ isAbstract: true })
export class User implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: string;

  @Field(() => [Post], { nullable: true })
  posts: null | Post[];

  constructor(model: UserConstructor) {
    this.id = model.id;
    this.posts = model.posts ?? null;
  }

  static fromPrisma(data: PrismaUser): User {
    return new User(data);
  }

  // this method removes all relational fields from the entity, and returns the base PrismaModel
  toPrisma(): PrismaUser {
    const { posts, ...entity } = this;
    return entity;
  }
}

export { PrismaUser };
"
`;

exports[`model templater > with uuid 1`] = `
"/////////////////////////////////////
// THIS FILE WAS AUTO GENERATED
// DO NOT EDIT THIS FILE DIRECTLY
/////////////////////////////////////

import { v4 as uuid } from \\"uuid\\";

import { ObjectType, Field, ID } from \\"@nestjs/graphql\\";
import { User as PrismaUser } from \\"./client-path\\";

export type UserConstructor = {
  id?: string | null;
};

@ObjectType({ isAbstract: true })
export class User implements PrismaUser {
  @Field(() => ID, { nullable: false })
  readonly id: string;

  constructor(model: UserConstructor) {
    this.id = model.id ?? uuid();
  }

  static fromPrisma(data: PrismaUser): User {
    return new User(data);
  }

  // this method removes all relational fields from the entity, and returns the base PrismaModel
  toPrisma(): PrismaUser {
    const { ...entity } = this;
    return entity;
  }
}

export { PrismaUser };
"
`;
